#!/bin/sh

# Setup basic path information.
MAIN="com.webtrends.edge.service.ServiceDaemon"
LOG_OUT="<%=File.join(@log_dir,"process.out")%>"
LOG_ERR="<%=File.join(@log_dir,"process.err")%>"
HOME_DIR="<%=@install_dir%>"
JAVA_HOME="<%=@java_home%>"
JAVA_OPTS="<%=@java_opts%>"
# Setup classpath
CP=""
CP=".:lib/*"

# Add all plugin .jar files to the classpath.
for path in `ls $HOME_DIR/modules`; do
    CP=$CP:plugins/$path/*
done

# Add the JMX options.
if [ -z "$JMX_OPTS" ]; then
    JMX_OPTS="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false "
fi

# Add the JMX port.
if [ -z "$JMX_PORT" ]; then
    JMX_PORT="<%=@java_jmx_port%>"
fi

# Add JMX options and port together.
JMX_OPTS="$JMX_OPTS -Dcom.sun.management.jmxremote.port=$JMX_PORT "

# Create the JSVC command line.
CMD="$JAVA_HOME/bin/java -Djava.library.path=/usr/local/lib:/opt/local/lib:/usr/lib -Dconfig.file=<%=@conf_url%> -cp $CP $JAVA_OPTS $JMX_OPTS"

# Find current PID if any.
FOUND_PID=`$JAVA_HOME/bin/jps -l |grep $MAIN |awk '{print $1}'`

# Check what the caller wants.
case "$1" in
    start)
        if [ "" = "$FOUND_PID" ]; then
            cd   $HOME_DIR
            echo $CMD $MAIN
            # For compatibility with runit we cannot backgroud
            # ourselves with a '&' at the end, though we do
            # need to exec.
            exec $CMD $MAIN >$LOG_OUT 2>$LOG_ERR
        else
            echo "Service already running"
            exit 1
        fi
        ;;
    stop)
        if [ "" = "$FOUND_PID" ]; then
            echo "Service not running, nothing to stop"
            exit 1
        else
            kill $FOUND_PID
            sleep 4
            # Find PID again to see if we need to use kill -9 termination.
            FOUND_PID=`ps -ef |grep $MAIN |grep -v grep |awk '{print $2}'`
            if [ "" != "$FOUND_PID" ]; then
                echo "Using kill did not work, sending kill -9 to process"
                kill -9 $FOUND_PID
            fi
            exit 0
        fi
        ;;
    status)
        # Status is found via actual running processes, rather than
        # trusting the PID log file.
        if [ "" = "$FOUND_PID" ]; then
            echo "Not running"
            exit 1
        else
            echo "Running"
            exit 0
        fi
        ;;
    *)
        echo "usage: daemon {start|stop|status}" >&2
        exit 1
        ;;
esac
