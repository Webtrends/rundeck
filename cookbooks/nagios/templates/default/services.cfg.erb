# Service definitions
#
# Autogenerated by Chef.

# monitoring service checks
define service {
    service_description Nagios
    hostgroup_name      <%= node['nagios']['server_role'] %>
    check_command       check-nagios
    use                 default-service
}

# default checks for all hosts

define service {
    service_description Free Space All Disks
    hostgroup_name      linux
    check_command       check_all_disks
    use                 default-service
}

define service {
    service_description SSH
    hostgroup_name      linux
    check_command       check_ssh
    use                 default-service
}

<% unless @service_hosts['monitoring'].nil? -%>
# If the monitoring host is a postfix relay, uncomment this.
#define service {
#    service_description Postfix
#    hostgroup_name      monitoring
#    check_command       check_nrpe!check_smtp
#    use                 default-service
#}

# If the monitoring host is a syslog server, uncomment this.
#define service {
#    service_description Rsyslog
#    hostgroup_name      monitoring
#    check_command       check_tcp!514
#    use                 default-service
#}

<% end -%>
<% unless @service_hosts['webserver'].nil? -%>
# basic web server http check
define service {
    service_description HTTP Processes
    hostgroup_name      webserver
    check_command       check_http
    use                 default-service
}

<% end -%>
<% unless @service_hosts['appserver'].nil? -%>
# basic check if appserver role is running unicorn
define service {
    service_description Unicorn Processes
    hostgroup_name      appserver
    check_command       check_nrpe!check_unicorn
    use                 default-service
}

define service {
    service_description Unicorn HTTP
    hostgroup_name      appserver
    check_command       check_http_port_expect!8080!"HTTP/1.1 302 Found"
    use                 default-service
}

<% end -%>
<% unless @service_hosts['database_master'].nil? -%>
# basic check if the database_master role is a mysql server
# database_master service checks
define service {
    service_description MySQL
    hostgroup_name      database_master
    check_command       check_nrpe!check_mysql_server
    use                 default-service
}

<% end -%>

# Services defined by data bags
<% @services.each do |service| -%>
  <% unless @service_hosts[service['hostgroup_name'].nil? && service['hostgroup_name'] != 'all' ] -%>
define service {
  service_description <%= service['description'] || service['id'] %>
  hostgroup_name <%= service['hostgroup_name'] %>
  check_command check_<%= service['id'] %>
  use <% if service['service_template'].nil? -%>default-service<% else -%><%= service['service_template'] %> <% end -%>
<% unless service['event_handler'].nil? -%>  event_handler <%= service['event_handler'] -%><% end -%>
<% unless service['obsess_over_service'].nil? -%>  obsess_over_service <%= service['obsess_over_service'] -%><% end -%>
<% unless service['is_volatile'].nil? -%>  is_volatile <%= service['is_volatile'] -%><% end -%>
<% unless service['check_freshness'].nil? -%>  check_freshness <%= service['check_freshness'] -%><% end -%>
<% unless service['process_perf_data'].nil? -%>  process_perf_data <%= service['process_perf_data'] -%><% end -%>
<% unless service['retain_status_information'].nil? -%>  retain_status_information <%= service['retain_status_information'] -%><% end -%>
<% unless service['retain_nonstatus_information'].nil? -%>  retain_nonstatus_information <%= service['retain_nonstatus_information'] -%><% end -%>
<% unless service['flap_detection_enabled'].nil? -%>  flap_detection_enabled <%= service['flap_detection_enabled'] -%><% end -%>
<% unless service['event_handler_enabled'].nil? -%>  event_handler_enabled <%= service['event_handler_enabled'] -%><% end -%>
<% unless service['event_handler'].nil? -%>  event_handler <%= service['event_handler'] -%><% end -%>
}
  <% end -%>

<% end -%>